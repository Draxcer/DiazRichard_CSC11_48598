Inputs a / b 

a = 11
b = 5 

a/b = 2 

a % b = 1

//===

a 			counter			
11 			0			Make sure 11 is > 5
- 5
____
6			1			Make sure 6 is > 5
-5
____
1 = Mod			2 = division			Is not > 


Flag as an input that will swap registers

set     r0 = 0 
	r1 = big number
	r2 = small number

compare r1 r2
	case greater
	case lass then

greater
	subtract
	push to r0 & r1
	start over

less than
	r2
	push to r0 ?




http://ideone.com/G3v2Ys
/*
	Dr. Mark E. Lehr
	Sept 16th, 2014
	Purpose: Inefficient technique for calculating a/b and a%b
	a/b -> counter contained in r0
	a%b -> remainder contained in r1
	a -> contained in r2
	b -> contained in r3
	flag -> r4 to reverse contents of r0 and r1
	temp -> r5 position to swap registers
*/
#include <iostream>
using namespace std;
 
void divmod(int&,int&,int&,int&,int&,int&);
 
int main() {
	// Declare variables a=111, b=5
	int r2=111, r3=5, r4=0, r5, r0=0, r1=r2;
	//Display the result
	cout<<"Actual Answer a/b = "<<r2/r3<<endl;
	cout<<"Acutal Remainder a%b = "<<r2%r3<<endl;
	//Determine the quotient and remainder
	divmod(r2,r3,r4,r5,r0,r1);
	//Display the calculated results
	cout<<"Calculated a/b = "<<r0<<endl;
	cout<<"Calculated a%b = "<<r1<<endl;
	//Exit
	return 0;
}
 
void divmod(int &r2,int &r3,int &r4,int &r5,int &r0,int &r1){
	//Determine if division is necessary
	if(r1>=r3){
		do{
			r0++;//Increment div counter by 1
			r1-=r3;//Subtract mod factor
		}while(r1>=r3);
	}
	//Swap if flag is set
	if(r4){int r5=r0;r0=r1;r1=r5;}	
}


//==


main:
	mov r2, #111
	mov r3, #5
	mov r0, #0
	mov r1, r2
	mov r4, #0

	cmp r1,r3
	blt swap
repeat_sub
	add r0, r0, #1
	sub r1, r1, r3
	cmp r1,r3
	bge repeat_sub
swap
	cmp r4, #0
	beq end;
	mov r5, r0
	mov r0, r1
	mov r1, r5
end:
	bx lr



//===


ld -og

gdb ./

start

disassemble

info registers

break *register

disassemble

continue

disassemble

stepi

//===
http://ideone.com/NRYI0H

    /*
    Richard Diaz
    Sept 19th, 2014
    Purpose: More efficient technique for calculating a/b and a%b
    a/b -> counter contained in r0
    a%b -> remainder contained in r1
    a -> contained in r2
    b -> contained in r3
    flag -> r4 to reverse contents of r0 and r1
    temp -> r5 temporary memory register for swap
    s -> r6 has the present scale 10^
    sf -> r7 scale factor = r3*r6 to subtract
    factor -> r8 shift factor 10
    shift -> Shift test r7*r8
    */
    #include <iostream>
    using namespace std;
     
    void divMod(int&,int&,int&,int&,int&,int&,int&,int&,int&,int&);
    void scale(int&,int&,int&,int&,int&,int&);
     
    int main() {
    // Declare variables a=111, b=5
    int r2=14, r3=5, r4=0, r5=0, r6=0, r7=0, r8=10, r9=0, r0=0, r1=r2;
    //Display the result
    cout<<"Actual Answer a/b = "<<r2/r3<<endl;
    cout<<"Acutal Remainder a%b = "<<r2%r3<<endl;
    //Determine the quotient and remainder
    divMod(r2,r3,r4,r5,r6,r7,r8,r9,r0,r1);
    //Display the calculated results
    cout<<"Calculated a/b = "<<r0<<endl;
    cout<<"Calculated a%b = "<<r1<<endl;
    //Exit
    return 0;
    }
     
    void scale(int &r1,int &r3,int &r8,int &r9,int &r6,int &r7){
    //Until learning to divide/shift this needs to be done
    //on each pass
    r6=1;//scale
    r7=r3*r6;//subtraction factor
    r9=r7*r8;//next subtraction factor to test
    //Keep shifting scale r6 by 10
    while(r1>r9){
    r6*=r8;//scale factor
    r7=r3*r6;//subtraction factor
    r9=r7*r8;//next subtraction factor to test
    }
    }
     
    //void divMod(int &a,int &b,int &flag,int &q,int &r)
    void divMod(int &r2,int &r3,int &r4,int &r5,int &r6,
    int &r7,int &r8,int &r9,int &r0,int &r1){
    //Determine the quotient and remainder
    //Check if the division is even necessary
    if(r1>=r3){
    //Check the scale r6 by continuously /10 unless r6=0
    do{
    //Until learning to divide/shift this needs to be done
    //on each pass
    scale(r1,r3,r8,r9,r6,r7);
    do{
    r0+=r6;//Increase by scale
    r1-=r7;//Subtract by b*scale
    }while(r1>=r7);
    }while(r6>1);
    }
    //Swap if flag is set
    if(r4){r5=r0;r0=r1;r1=r5;}
    }

